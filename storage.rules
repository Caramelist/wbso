rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the file
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    // User profile images
    match /users/{userId}/profile/{fileName} {
      allow read: if true; // Profile images are public
      allow write: if isAuthenticated() && isOwner(userId) 
        && request.resource.size < 5 * 1024 * 1024 // 5MB limit
        && request.resource.contentType.matches('image/.*');
    }
    
    // Company documents and logos
    match /companies/{companyId}/documents/{fileName} {
      allow read: if isAuthenticated(); // Company members can read
      allow write: if isAuthenticated() 
        && request.resource.size < 10 * 1024 * 1024 // 10MB limit
        && (request.resource.contentType.matches('image/.*') || 
            request.resource.contentType.matches('application/pdf') ||
            request.resource.contentType.matches('application/msword') ||
            request.resource.contentType.matches('application/vnd.openxmlformats-officedocument.wordprocessingml.document'));
    }
    
    // WBSO application exports
    match /applications/{applicationId}/exports/{fileName} {
      allow read: if isAuthenticated(); // Application owner can read
      allow write: if false; // Only functions can create exports
    }
    
    // Temporary uploads (24h TTL)
    match /temp/{userId}/{fileName} {
      allow read, write: if isAuthenticated() && isOwner(userId)
        && request.resource.size < 50 * 1024 * 1024; // 50MB limit
    }
    
    // System assets (public read)
    match /system/{allPaths=**} {
      allow read: if true;
      allow write: if false; // Only admins via functions
    }
    
    // Default deny all other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
} 